name: CI
env:
  DEBUG: napi:*
  APP_NAME: sentry-node-minidump
  MACOSX_DEPLOYMENT_TARGET: '10.13'

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            build: yarn build:native
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            build: |
              export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=32;
              export CARGO_PROFILE_RELEASE_LTO=false
              yarn build:native --target i686-pc-windows-msvc && yarn build:javascript
            target: i686-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build:native --target aarch64-pc-windows-msvc && yarn build:javascript
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build:native
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build:native --target=aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              yarn build 
              strip sentry-node-minidump.linux-x64-gnu.node

    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: ${{ matrix.settings.target }}
      - name: Generate Cargo.lock
        uses: actions-rs/cargo@v1
        with:
          command: generate-lockfile
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install --ignore-scripts --frozen-lockfile --registry https://registry.npmjs.org --network-timeout 300000
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.settings.target }}
          path: |
            ${{ env.APP_NAME }}.*.node
            bindings.cjs

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'

      - name: Install dependencies
        run: yarn install --network-timeout 300000

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: artifact-*
          path: ./
          merge-multiple: true

      - name: Build JavaScript
        run: yarn build:javascript

      - name: Publish Dry Run
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --dry-run --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish 
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
